on: [push, pull_request]

name: Continuous integration

jobs:
  build-test:
    name: Build and run package tests (${{ matrix.env.name }})
    strategy:
      fail-fast: false
      matrix:
        env:
          - name: Linux
            short: linux
            runs-on: ubuntu-latest
          - name: MacOS
            short: macos
            runs-on: macos-latest
          - name: Windows
            short: windows
            runs-on: windows-latest
    runs-on: ${{ matrix.env.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release -p trans-derive -p trans -p trans-gen

      - name: Build testing binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --example testing

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: testing-${{ matrix.env.short }}
          path: target/release/examples/testing${{ fromJson('["", ".exe"]')[matrix.env.name == 'Windows'] }}

  test:
    name: ${{ matrix.language }} ${{ matrix.env.name }}
    needs: build-test
    strategy:
      fail-fast: false
      matrix:
        language:
          - C++
          - C#
          - D
          - F#
          - Go
          - Java
          - JavaScript
          - Kotlin
          # - Markdown
          - Python
          - Ruby
          - Rust
          - Scala
          - TypeScript
          - Swift
          - PHP
          - Haskell
        env:
          - name: Linux
            short: linux
            runs-on: ubuntu-latest
            executable: ./testing
          - name: MacOS
            short: macos
            runs-on: macos-latest
            executable: ./testing
          - name: Windows
            short: windows
            runs-on: windows-latest
            executable: .\testing.exe
        exclude:
          - language: Swift
            env:
              name: Windows
              short: windows
              runs-on: windows-latest
              executable: .\testing.exe
    runs-on: ${{ matrix.env.runs-on }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: testing-${{ matrix.env.short }}

      - name: Prepare testing binary
        run: chmod +x testing

      - if: matrix.language == 'D'
        name: Setup D
        uses: dlang-community/setup-dlang@v1

      - if: matrix.language == 'Java'
        name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: "15"

      - if: matrix.language == 'PHP'
        name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          extensions: sockets

      - name: Run tests
        run: ${{ matrix.env.executable }} --language=${{ matrix.language }} --verbose

  update-testing-branch:
    name: Update testing branch
    needs:
      - build-test
      - test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: testing-linux

      - name: Update testing branch
        run: |
          git config --global user.name 'CI'
          git config --global user.email '<>'
          git fetch origin testing
          git worktree add testing-branch testing
          chmod +x testing
          ./testing --generate=testing-branch/generated-code
          pushd testing-branch
          git add .
          git diff --cached --exit-code || git commit -m "Update generated code (run ${{ github.run_id }})"
          popd
          rm -rf branch
          git worktree prune
          git push origin testing
