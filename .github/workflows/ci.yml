on: [push, pull_request]

name: Continuous integration

jobs:
  build-test:
    name: Build and run package tests (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Linux
            runs-on: ubuntu-latest
          - os: MacOS
            runs-on: macos-latest
          - os: Windows
            runs-on: windows-latest
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release -p trans-derive -p trans -p trans-gen

      - name: Build testing binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --example testing

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: testing-${{ matrix.os }}
          path: target/release/examples/testing${{ fromJson('["", ".exe"]')[matrix.os == 'Windows'] }}

  test-languages-linux:
    name: Test ${{ matrix.language }} (Linux)
    needs: build-test
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: C++
            lang: cpp
          - language: C#
            lang: csharp
          - language: D
            lang: dlang
          - language: F#
            lang: fsharp
          - language: Go
            lang: go
          - language: Java
            lang: java
          - language: JavaScript
            lang: javascript
          - language: Kotlin
            lang: kotlin
          # - language: Markdown
          #   lang: markdown
          - language: Python
            lang: python
          - language: Ruby
            lang: ruby
          - language: Rust
            lang: rust
          - language: Scala
            lang: scala
          - language: TypeScript
            lang: typescript
          - language: Swift
            lang: swift
          - language: PHP
            lang: php
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: testing-Linux

      - name: Prepare testing binary
        run: chmod +x testing

      - if: matrix.lang == 'dlang'
        name: Setup D
        uses: dlang-community/setup-dlang@v1

      - if: matrix.lang == 'java'
        name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: "15"

      - name: Run tests
        run: ./testing --lang=${{ matrix.lang }}

  test-languages-macos:
    name: Test ${{ matrix.language }} (MacOS)
    needs: build-test
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: C++
            lang: cpp
          - language: C#
            lang: csharp
          - language: D
            lang: dlang
          - language: F#
            lang: fsharp
          - language: Go
            lang: go
          - language: Java
            lang: java
          - language: JavaScript
            lang: javascript
          - language: Kotlin
            lang: kotlin
          # - language: Markdown
          #   lang: markdown
          #   docker: ???
          - language: Python
            lang: python
          - language: Ruby
            lang: ruby
          - language: Rust
            lang: rust
          - language: Scala
            lang: scala
          - language: TypeScript
            lang: typescript
          - language: Swift
            lang: swift
          - language: PHP
            lang: php
    runs-on: macos-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: testing-MacOS

      - name: Prepare testing binary
        run: chmod +x testing

      - if: matrix.lang == 'dlang'
        name: Setup D
        uses: dlang-community/setup-dlang@v1

      - if: matrix.lang == 'java'
        name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: "15"

      - name: Run tests
        run: ./testing --lang=${{ matrix.lang }}

  test-languages-windows:
    name: Test ${{ matrix.language }} (Windows)
    needs: build-test
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: C++
            lang: cpp
          - language: C#
            lang: csharp
          - language: D
            lang: dlang
          - language: F#
            lang: fsharp
          - language: Go
            lang: go
          - language: Java
            lang: java
          - language: JavaScript
            lang: javascript
          - language: Kotlin
            lang: kotlin
          # - language: Markdown
          #   lang: markdown
          #   docker: ???
          - language: Python
            lang: python
          - language: Ruby
            lang: ruby
          - language: Rust
            lang: rust
          - language: Scala
            lang: scala
          - language: TypeScript
            lang: typescript
          # - language: Swift
          #   lang: swift
          - language: PHP
            lang: php
    runs-on: windows-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: testing-Windows

      - if: matrix.lang == 'dlang'
        name: Setup D
        uses: dlang-community/setup-dlang@v1

      - if: matrix.lang == 'java'
        name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: "15"

      - name: Run tests
        run: |
          .\testing.exe --lang=${{ matrix.lang }}

  update-testing-branch:
    name: Update testing branch
    needs:
      - build-test
      - test-languages-linux
      - test-languages-macos
      - test-languages-windows
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: testing-Linux

      - name: Update testing branch
        run: |
          git config --global user.name 'CI'
          git config --global user.email '<>'
          git fetch origin testing
          git worktree add testing-branch testing
          chmod +x testing
          ./testing --generate=testing-branch/generated-code
          pushd testing-branch
          git add .
          git diff --cached --exit-code || git commit -m "Update generated code (run ${{ github.run_id }})"
          popd
          rm -rf branch
          git worktree prune
          git push origin testing
