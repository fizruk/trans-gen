import model;
import stream;
import std.conv;
import std.typecons : Nullable;

{{ doc_comment(documentation) }}
abstract class {{ base_name.camel_case(conv) }} {
    {{ doc_write_to(&base_name.camel_case(conv)) }}
    abstract void writeTo(Stream writer) const;

    {{ doc_read_from(&base_name.camel_case(conv)) }}
    static {{ base_name.camel_case(conv) }} readFrom(Stream reader) {
        switch (reader.readInt()) {
            - for variant in variants {
            case {{ variant.name.camel_case(conv) }}.TAG:
                return {{ variant.name.camel_case(conv) }}.readFrom(reader);
            - }
            default:
                throw new Exception("Unexpected tag value");
        }
    }
    - for (tag, variant) in variants.iter().enumerate() {
    
    {{ struct_impl(variant, Some((base_name, tag))) }}
    - }
}