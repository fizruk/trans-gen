- match schema {
- Schema::Bool => {
{{ var }} = reader.readBool();
- }
- Schema::Int32 => {
{{ var }} = reader.readInt();
- }
- Schema::Int64 => {
{{ var }} = reader.readLong();
- }
- Schema::Float32 => {
{{ var }} = reader.readFloat();
- }
- Schema::Float64 => {
{{ var }} = reader.readDouble();
- }
- Schema::String => {
{{ var }} = reader.readString();
- }
- Schema::Struct { .. } | Schema::OneOf { .. } => {
{{ var }} = {{ type_name(schema) }}.readFrom(reader);
- }
- Schema::Option(inner) => {
if (reader.readBool()) {
    {{ read_var(var, inner) }}
} else {
    {{ var }}.nullify();
}
- }
- Schema::Vec(inner) => {
{{ var }} = new {{ type_name(inner) }}[reader.readInt()];
- let index_var = format!("{}Index", var); let index_var = &index_var;
for (int {{ index_var }} = 0; {{ index_var }} < {{ var }}.length; {{ index_var }}++) {
    - let element_var = format!("{}Key", var); let element_var = &element_var;
    {{ type_name(inner) }} {{ element_var }};
    {{ read_var(element_var, inner) }}
    {{ var }}[{{ index_var }}] = {{ element_var }};
}
- }
- Schema::Map(key_type, value_type) => {
- let size_var = format!("{}Size", var); let size_var = &size_var;
int {{ size_var }} = reader.readInt();
{{ var }}.clear();
- let index_var = format!("{}Index", var); let index_var = &index_var;
for (int {{ index_var }} = 0; {{ index_var }} < {{ size_var }}; {{ index_var }}++) {
    - let key_var = format!("{}Key", var); let key_var = &key_var;
    - let value_var = format!("{}Value", var); let value_var = &value_var;
    {{ type_name(key_type) }} {{ key_var }};
    {{ type_name(value_type) }} {{ value_var }};
    {{ read_var(key_var, key_type) }}
    {{ read_var(value_var, value_type) }}
    {{ var }}[{{ key_var }}] = {{ value_var }};
}
- }
- Schema::Enum { base_name, variants, .. } => {
{{ var }} = read{{ base_name.camel_case(conv) }}(reader);
- }
- }