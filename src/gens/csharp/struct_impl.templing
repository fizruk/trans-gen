{{ doc_comment(&definition.documentation) }}
- if let Some((base_name, _)) = base {
public class {{ definition.name.camel_case(conv) }} : {{ base_name.camel_case(conv) }}
- } else {
public struct {{ definition.name.camel_case(conv) }}
- }
{
    - if let Some((_, tag)) = base {
    public const int TAG = {{ tag }};

    - }
    - for field in &definition.fields {
    {{ doc_comment(&field.documentation) }}
    public {{ type_name(&field.schema) }} {{ field.name.camel_case(conv) }} { get; set; }
    - }
    - if base.is_some() {

    public {{ definition.name.camel_case(conv) }}() { }
    - }
    - if !definition.fields.is_empty() {

    public {{ definition.name.camel_case(conv) }}(~
        - for (index, field) in definition.fields.iter().enumerate() {
            - if index != 0 {
                ~, ~
            - }
            ~{{ type_name(&field.schema) }} {{ field.name.mixed_case(conv) }}~
        - }
    ~)
    {
        - for field in &definition.fields {
        this.{{ field.name.camel_case(conv) }} = {{ field.name.mixed_case(conv) }};
        - }
    }
    - }

    {{ doc_read_from(&definition.name.camel_case(conv)) }}
    public static~
    - if base.is_some() {
        ~ new~
    - }
    ~ {{ definition.name.camel_case(conv) }} ReadFrom(System.IO.BinaryReader reader)
    {
        var result = new {{ definition.name.camel_case(conv) }}();
        - for field in &definition.fields {
        {{ read_var(&format!("result.{}", field.name.camel_case(conv)), &field.schema) }}
        - }
        return result;
    }

    {{ doc_write_to(&definition.name.camel_case(conv)) }}
    public~
    - if base.is_some() {
        ~ override~
    - }
    ~ void WriteTo(System.IO.BinaryWriter writer)
    {
        - if base.is_some() {
        writer.Write(TAG);
        - }
        - for field in &definition.fields {
        {{ write_var(&field.name.camel_case(conv), &field.schema) }}
        - }
    }

    {{ doc_to_string(&definition.name.camel_case(conv)) }}
    public override string ToString() {
        string stringResult = "{{ definition.name.camel_case(conv) }} { ";
        - for (index, field) in definition.fields.iter().enumerate() {
        - if index != 0 {
        stringResult += ", ";
        - }
        stringResult += "{{ field.name.camel_case(conv) }}: ";
        {{ var_to_string(&field.name.camel_case(conv), &field.schema) }}
        - }
        stringResult += " }";
        return stringResult;
    }
}