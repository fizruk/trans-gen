{{ doc_comment(&definition.documentation) }}
class {{ definition.name.camel_case(conv) }}~
- if let Some((base_name, _)) = base {
    ~ extends {{ base_name.camel_case(conv) }} {
- } else {
    ~ {
- }
    - for field in &definition.fields {
    {{ doc_comment(&field.documentation) }}
    {{ field.name.mixed_case(conv) }};
    - }

    constructor(~
    - for (index, field) in definition.fields.iter().enumerate() {
        ~{{field.name.mixed_case(conv)}}~
        - if index + 1 < definition.fields.len() {
            ~, ~
        - }
    - }
    ~) {
        - if base.is_some() {
        super();
        - }
        - for field in &definition.fields {
        this.{{ field.name.mixed_case(conv) }} = {{ field.name.mixed_case(conv) }};
        - }
    }

    {{ doc_read_from(&definition.name.camel_case(conv)) }}
    static async readFrom(stream) {
        - for field in &definition.fields {
        let {{ field.name.mixed_case(conv) }};
        {{ read_var(&field.name.mixed_case(conv), &field.schema) }}
        - }
        return new {{ definition.name.camel_case(conv) }}(~
        - for (index, field) in definition.fields.iter().enumerate() {
            ~{{field.name.mixed_case(conv)}}~
            - if index + 1 < definition.fields.len() {
                ~, ~
            - }
        - }
        ~);
    }

    {{ doc_write_to(&definition.name.camel_case(conv)) }}
    async writeTo(stream) {
        - if base.is_some() {
        await stream.writeInt({{ definition.name.camel_case(conv) }}.TAG);
        - }
        - for field in &definition.fields {
        let {{ field.name.mixed_case(conv) }} = this.{{ field.name.mixed_case(conv) }};
        {{ write_var(&field.name.mixed_case(conv), &field.schema) }}
        - }
    }
}

- if let Some((base_name, tag)) = base {
{{ definition.name.camel_case(conv) }}.TAG = {{ tag }};
{{ base_name.camel_case(conv) }}.{{ definition.name.camel_case(conv) }} = {{ definition.name.camel_case(conv) }};
- }