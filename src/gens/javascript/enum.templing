{{ doc_comment(documentation) }}
class {{ base_name.camel_case(conv) }} {
    constructor(name, tag) {
        this.name = name;
        this.tag = tag;
    }

    - for (tag, variant) in variants.iter().enumerate() {
    {{ doc_comment(&variant.documentation) }}
    static {{ variant.name.shouty_snake_case(conv) }} = new {{ base_name.camel_case(conv) }}("{{ variant.name.shouty_snake_case(conv) }}", {{ tag }});
    - }

    {{ doc_read_from(&base_name.camel_case(conv)) }}
    static async readFrom(stream) {
        const tag = await stream.readInt();
        - for variant in variants {
        if (tag == {{ base_name.camel_case(conv) }}.{{ variant.name.shouty_snake_case(conv) }}.tag) {
            return {{ base_name.camel_case(conv) }}.{{ variant.name.shouty_snake_case(conv) }};
        }
        - }
        throw new Error("Unexpected tag value");
    }

    {{ doc_write_to(&base_name.camel_case(conv)) }}
    async writeTo(stream) {
        await stream.writeInt(this.tag);
    }

    [Symbol.for('nodejs.util.inspect.custom')]() {
        return this.name;
    }
}

module.exports = {{ base_name.camel_case(conv) }};