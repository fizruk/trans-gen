#ifndef __MODEL_{{ base_name.shouty_snake_case(conv) }}_HPP__
#define __MODEL_{{ base_name.shouty_snake_case(conv) }}_HPP__

#include "Stream.hpp"

- if let Some(path) = namespace_path(namespace) {
namespace {{ path }} {

- }
{{ self.doc_comment(documentation) }}
enum class {{ base_name.camel_case(conv) }} {
    - for (index, variant) in variants.iter().enumerate() {
    {{ self.doc_comment(&variant.documentation) }}
    {{ variant.name.shouty_snake_case(conv) }} = {{ index }}{{# if index + 1 < variants.len() { }},{{# } }}
    - }
};

{{ self.doc_read_from(&base_name.camel_case(conv)) }}
{{ base_name.camel_case(conv) }} read{{ base_name.camel_case(conv) }}(InputStream& stream);

{{ self.doc_to_string(&base_name.camel_case(conv)) }}
std::string {{ base_name.mixed_case(conv) }}ToString({{ base_name.camel_case(conv) }} value);

- if namespace_path(namespace).is_some() {
}

- }
#endif