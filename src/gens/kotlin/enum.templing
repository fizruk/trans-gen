package model

import util.StreamUtil

enum class {{ base_name.camel_case(conv) }} private constructor(val tag: Int) {
    - for (index, variant) in variants.iter().enumerate() {
    {{ variant.name.shouty_snake_case(conv) }}({{ index }})~
    - if index + 1 < variants.len() {
        ~,
    - } else {
        ~;
    - }
    - }

    companion object {
        @Throws(java.io.IOException::class)
        fun readFrom(stream: java.io.InputStream): {{ base_name.camel_case(conv) }} {
            return when (StreamUtil.readInt(stream)) {
            - for (tag, variant) in variants.iter().enumerate() {
            {{ variant.name.shouty_snake_case(conv) }}.tag -> {{ variant.name.shouty_snake_case(conv) }}
            - }
            else -> throw java.io.IOException("Unexpected tag value")
            }
        }
    }
}