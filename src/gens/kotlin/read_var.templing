- match schema {
- Schema::Bool => {
{{ var }} = StreamUtil.readBoolean(stream)
- }
- Schema::Int32 => {
{{ var }} = StreamUtil.readInt(stream)
- }
- Schema::Int64 => {
{{ var }} = StreamUtil.readLong(stream)
- }
- Schema::Float32 => {
{{ var }} = StreamUtil.readFloat(stream)
- }
- Schema::Float64 => {
{{ var }} = StreamUtil.readDouble(stream)
- }
- Schema::String => {
{{ var }} = StreamUtil.readString(stream)
- }
- Schema::Struct{definition:Struct{name,..},..} | Schema::OneOf { base_name: name, .. } | Schema::Enum { base_name: name, .. } => {
{{ var }} = model.{{ name.camel_case(conv) }}.readFrom(stream)
- }
- Schema::Option(inner) => {
if (StreamUtil.readBoolean(stream)) {
    {{ read_var(var, inner) }}
} else {
    {{ var }} = null
}
- }
- Schema::Vec(inner) => {
{{ var }} = Array(StreamUtil.readInt(stream), {
    - let element_var = format!("{}Element", var); let element_var = &element_var;
    var {{ element_var }}: {{ type_name(inner) }}
    {{ read_var(element_var, inner) }}
    {{ element_var }}
})
- }
- Schema::Map(key_type, value_type) => {
- let size_var = format!("{}Size", var); let size_var = &size_var;
val {{ size_var }} = StreamUtil.readInt(stream)
{{ var }} = mutableMapOf();
- let index_var = format!("{}Index", var); let index_var = &index_var;
for ({{ index_var }} in 0 until {{ size_var }}) {
    - let key_var = format!("{}Key", var); let key_var = &key_var;
    - let value_var = format!("{}Value", var); let value_var = &value_var;
    var {{ key_var }}: {{ type_name(key_type) }}
    {{ read_var(key_var, key_type) }}
    var {{ value_var }}: {{ type_name(value_type) }}
    {{ read_var(value_var, value_type) }}
    {{ var }}.put({{ key_var }}, {{ value_var }})
}
- }
- }