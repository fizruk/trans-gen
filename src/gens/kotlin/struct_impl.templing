{{ doc_comment(&definition.documentation) }}
- if let Some((base_name, _)) = base {
class {{ definition.name.camel_case(conv) }} : {{ base_name.camel_case(conv) }} {
- } else {
class {{ definition.name.camel_case(conv) }} {
- }
    - for field in &definition.fields {
    {{ doc_comment(&field.documentation) }}
    - if lateinit(&field.schema) {
    lateinit var {{ field.name.mixed_case(conv) }}: {{ self.type_name(&field.schema) }}
    - } else {
    var {{ field.name.mixed_case(conv) }}: {{ self.type_name(&field.schema) }} = {{ default_value(&field.schema) }}
    - }
    - }

    constructor(~
        - for (index, field) in definition.fields.iter().enumerate() {
            - if index != 0 {
            ~, ~
            - }
            ~{{ field.name.mixed_case(conv) }}: {{ self.type_name(&field.schema) }}~
        - }
    ~) {
        - for field in &definition.fields {
        this.{{ field.name.mixed_case(conv) }} = {{ field.name.mixed_case(conv) }}
        - }
    }

    {{ doc_write_to(&definition.name.camel_case(conv)) }}
    @Throws(java.io.IOException::class)
    {{# if base.is_some() { }}override {{# } }}fun writeTo(stream: java.io.OutputStream) {
        - if base.is_some() {
        StreamUtil.writeInt(stream, TAG)
        - }
        - for field in &definition.fields {
        {{ self.write_var(&field.name.mixed_case(conv), &field.schema) }}
        - }
    }

    {{ doc_to_string(&definition.name.camel_case(conv)) }}
    override fun toString(): String {
        var stringBuilder = StringBuilder("{{ definition.name.camel_case(conv) }} { ")
        - for (index, field) in definition.fields.iter().enumerate() {
        - if index != 0 {
        stringBuilder.append(", ")
        - }
        stringBuilder.append("{{ field.name.mixed_case(conv) }}: ")
        {{ self.var_to_string(&field.name.mixed_case(conv), &field.schema) }}
        - }
        stringBuilder.append(" }")
        return stringBuilder.toString()
    }

    companion object {
        - if let Some((_, tag)) = base {
        val TAG = {{ tag }}

        - }
        {{ doc_read_from(&definition.name.camel_case(conv)) }}
        @Throws(java.io.IOException::class)
        fun readFrom(stream: java.io.InputStream): {{ definition.name.camel_case(conv) }} {
            - for field in &definition.fields {
            var {{ field.name.mixed_case(conv) }}: {{ self.type_name(&field.schema) }}
            {{ self.read_var(&field.name.mixed_case(conv), &field.schema) }}
            - }
            return {{ definition.name.camel_case(conv) }}(~
                - for (index, field) in definition.fields.iter().enumerate() {
                    - if index != 0 {
                    ~, ~
                    - }
                    ~{{ field.name.mixed_case(conv) }}~
                - }
            ~)
        }
    }
}