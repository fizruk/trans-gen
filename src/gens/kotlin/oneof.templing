package model

import util.StreamUtil

abstract class {{ base_name.camel_case(conv) }} {
    @Throws(java.io.IOException::class)
    abstract fun writeTo(stream: java.io.OutputStream)

    companion object {
        @Throws(java.io.IOException::class)
        fun readFrom(stream: java.io.InputStream): {{ base_name.camel_case(conv) }} {
            when (StreamUtil.readInt(stream)) {
                - for variant in variants {
                {{ variant.name.camel_case(conv) }}.TAG -> return {{ variant.name.camel_case(conv) }}.readFrom(stream)
                - }
                else -> throw java.io.IOException("Unexpected tag value")
            }
        }
    }
    - for (tag, variant) in variants.iter().enumerate() {

    {{ struct_impl(variant, Some((base_name, tag))) }}
    - }
}