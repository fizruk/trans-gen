- if let Some((base_name, _)) = base {
public static class {{ struc.name.camel_case(conv) }} extends {{ base_name.camel_case(conv) }} {
- } else {
public class {{ struc.name.camel_case(conv) }} {
- }
    - if let Some((_, tag)) = base {
    public static final int TAG = {{ tag }};

    - }
    - for field in &struc.fields {
    private {{ type_name(&field.schema) }} {{ field.name.mixed_case(conv) }};

    public {{ type_name(&field.schema) }} {{ getter_prefix(&field.schema) }}{{ field.name.camel_case(conv) }}() {
        return {{ field.name.mixed_case(conv) }};
    }

    public void set{{ field.name.camel_case(conv) }}({{ type_name(&field.schema) }} value) {
        this.{{ field.name.mixed_case(conv) }} = value;
    }
    - }

    public {{ struc.name.camel_case(conv) }}(~
    - for (index, field) in struc.fields.iter().enumerate() {
        - if index != 0 {
            ~, ~
        - }
        ~{{ type_name(&field.schema) }} {{ field.name.mixed_case(conv) }}~
    - }
    ~) {
        - for field in &struc.fields {
        this.{{ field.name.mixed_case(conv) }} = {{ field.name.mixed_case(conv) }};
        - }
    }

    public static {{ struc.name.camel_case(conv) }} readFrom(java.io.InputStream stream) throws java.io.IOException {
        - for field in &struc.fields {
        {{ type_name(&field.schema) }} {{ field.name.mixed_case(conv) }};
        {{ read_var(&field.name.mixed_case(conv), &field.schema) }}
        - }
        return new {{ struc.name.camel_case(conv) }}(~
        - for (index, field) in struc.fields.iter().enumerate() {
            - if index != 0 {
                ~, ~
            - }
            ~{{ field.name.mixed_case(conv) }}~
        - }
        ~);
    }

    - if base.is_some() {
    @Override
    - }
    public void writeTo(java.io.OutputStream stream) throws java.io.IOException {
        - if base.is_some() {
        StreamUtil.writeInt(stream, TAG);
        - }
        - for field in &struc.fields {
        {{ write_var(&field.name.mixed_case(conv), &field.schema) }}
        - }
    }

    @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder("{{ struc.name.camel_case(conv) }} { ");
        - for (index, field) in struc.fields.iter().enumerate() {
        - if index != 0 {
        stringBuilder.append(", ");
        - }
        stringBuilder.append("{{ field.name.mixed_case(conv) }}: ");
        {{ var_to_string(&field.name.mixed_case(conv), &field.schema) }}
        - }
        stringBuilder.append(" }");
        return stringBuilder.toString();
    }
}