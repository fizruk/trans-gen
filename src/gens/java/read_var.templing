- match schema {
- Schema::Bool => {
{{ var }} = StreamUtil.readBoolean(stream);
- }
- Schema::Int32 => {
{{ var }} = StreamUtil.readInt(stream);
- }
- Schema::Int64 => {
{{ var }} = StreamUtil.readLong(stream);
- }
- Schema::Float32 => {
{{ var }} = StreamUtil.readFloat(stream);
- }
- Schema::Float64 => {
{{ var }} = StreamUtil.readDouble(stream);
- }
- Schema::String => {
{{ var }} = StreamUtil.readString(stream);
- }
- Schema::Struct { .. } | Schema::OneOf { .. } | Schema::Enum { .. } => {
{{ var }} = {{ self.type_name(schema) }}.readFrom(stream);
- }
- Schema::Option(inner) => {
if (StreamUtil.readBoolean(stream)) {
    {{ self.read_var(var, inner) }}
} else {
    {{ var }} = null;
}
- }
- Schema::Vec(inner) => {
{{ var }} = new {{ self.type_name_prearray(inner) }}[StreamUtil.readInt(stream)]{{ self.type_name_postarray(inner) }};
- let index_var = format!("{}Index", var); let index_var = &index_var;
for (int {{ index_var }} = 0; {{ index_var }} < {{ var }}.length; {{ index_var }}++) {
    - let element_var = format!("{}Element", var); let element_var = &element_var;
    {{ self.type_name(inner) }} {{ element_var }};
    {{ self.read_var(element_var, inner) }}
    {{ var }}[{{ index_var }}] = {{ element_var }};
}
- }
- Schema::Map(key_type, value_type) => {
- let size_var = format!("{}Size", var); let size_var = &size_var;
int {{ size_var }} = StreamUtil.readInt(stream);
{{ var }} = new java.util.HashMap<>({{ size_var }});
- let index_var = format!("{}Index", var); let index_var = &index_var;
for (int {{ index_var }} = 0; {{ index_var }} < {{ size_var }}; {{ index_var }}++) {
    - let key_var = format!("{}Key", var); let key_var = &key_var;
    - let value_var = format!("{}Value", var); let value_var = &value_var;
    {{ self.type_name(key_type) }} {{ key_var }};
    {{ self.read_var(key_var, key_type) }}
    {{ self.type_name(value_type) }} {{ value_var }};
    {{ self.read_var(value_var, value_type) }}
    {{ var }}.put({{ key_var }}, {{ value_var }});
}
- }
- }