- let full_name = if let Some((base_name, _)) = base {
static {{ struc.name.camel_case(conv) }} = class extends {{ base_name.camel_case(conv) }} {
- format!("{}.{}", base_name.camel_case(conv), struc.name.camel_case(conv))
- } else {
export class {{ struc.name.camel_case(conv) }} {
- struc.name.camel_case(conv)
- };
    - if let Some((base_name, tag)) = base {
    static const TAG = {{ tag }};

    - }
    - for field in &struc.fields {
    {{ field.name.mixed_case(conv) }}: {{ type_name(&field.schema) }}
    - }

    constructor(~
    - for (index, field) in struc.fields.iter().enumerate() {
        - if index != 0 {
            ~, ~
        - }
        ~{{ field.name.mixed_case(conv) }}: {{ type_name(&field.schema) }}~
    - }
    ~) {
        - if base.is_some() {
        super();
        - }
        - for field in &struc.fields {
        this.{{ field.name.mixed_case(conv) }} = {{ field.name.mixed_case(conv) }};
        - }
    }

    static async readFrom(stream: StreamWrapper): Promise<{{ full_name }}> {
        - for field in &struc.fields {
        let {{ field.name.mixed_case(conv) }};
        {{ read_var(&field.name.mixed_case(conv), &field.schema) }}
        - }
        return new {{ struc.name.camel_case(conv) }}(~
        - for (index, field) in struc.fields.iter().enumerate() {
            ~{{field.name.mixed_case(conv)}}~
            - if index + 1 < struc.fields.len() {
                ~, ~
            - }
        - }
        ~)
    }

    async writeTo(stream: StreamWrapper) {
        - if base.is_some() {
        await stream.writeInt({{ struc.name.camel_case(conv) }}.TAG);
        - }
        - if let Some(magic) = struc.magic {
        await stream.writeInt({{ magic }});
        - }
        - for field in &struc.fields {
        let {{ field.name.mixed_case(conv) }} = this.{{ field.name.mixed_case(conv) }};
        {{ write_var(&field.name.mixed_case(conv), &field.schema) }}
        - }
    }
}