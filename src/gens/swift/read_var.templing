- match schema {
- Schema::Bool => {
{{ var }} = stream.readBool()
- }
- Schema::Int32 => {
{{ var }} = stream.readInt32()
- }
- Schema::Int64 => {
{{ var }} = stream.readInt64()
- }
- Schema::Float32 => {
{{ var }} = stream.readFloat()
- }
- Schema::Float64 => {
{{ var }} = stream.readDouble()
- }
- Schema::String => {
{{ var }} = stream.readString()
- }
- Schema::Struct(Struct { name, .. }) | Schema::OneOf { base_name: name, .. } | Schema::Enum { base_name: name, .. } => {
{{ var }} = {{ name.camel_case(conv) }}.readFrom(stream)
- }
- Schema::Option(inner) => {
if stream.readBool() {
    {{ read_var(var, inner) }}
} else {
    {{ var }} = nil
}
- }
- Schema::Vec(inner) => {
- let size_var = format!("{}Size", var); let size_var = &size_var;
let {{ size_var }} = stream.readInt32()
{{ var }} = (0..<{{ size_var }}).map{ _ in
    - let element_var = format!("{}Size", var); let element_var = &element_var;
    var {{ element_var }}: {{ type_name(inner) }}
    {{ read_var(element_var, inner) }}
    return {{ element_var }}
}
- }
- Schema::Map(key_type, value_type) => {
- let size_var = format!("{}Size", var); let size_var = &size_var;
let {{ size_var }} = stream.readInt32()
{{ var }} = [:]
for _ in 0..<{{ size_var }} {
    - let key_var = format!("{}Key", var); let key_var = &key_var;
    - let value_var = format!("{}Value", var); let value_var = &value_var;
    let {{ key_var }}: {{ type_name(key_type) }}
    let {{ value_var }}: {{ type_name(value_type) }}
    {{ read_var(key_var, key_type) }}
    {{ read_var(value_var, value_type) }}
    {{ var }}[{{ key_var }}] = {{ value_var }}
}
- }
- }