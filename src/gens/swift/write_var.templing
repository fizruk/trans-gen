- match schema {
- Schema::Bool => {
stream.writeBool({{ var }})
- }
- Schema::Int32 => {
stream.writeInt32({{ var }})
- }
- Schema::Int64 => {
stream.writeInt64({{ var }})
- }
- Schema::Float32 => {
stream.writeFloat({{ var }})
- }
- Schema::Float64 => {
stream.writeDouble({{ var }})
- }
- Schema::String => {
stream.writeString({{ var }})
- }
- Schema::Struct(_) | Schema::OneOf { .. } | Schema::Enum { .. } => {
{{ var }}.writeTo(stream)
- }
- Schema::Option(inner) => {
if {{ var }} == nil {
    stream.writeBool(false)
} else {
    stream.writeBool(true)
    - let value_var = format!("{}Value", var); let value_var = &value_var;
    let {{ value_var }} = {{ var }}!
    {{ write_var(value_var, inner) }}
}
- }
- Schema::Vec(inner) => {
stream.writeInt32(Int32({{ var }}.count))
- let element_var = format!("{}Element", var); let element_var = &element_var;
for {{ element_var }} in {{ var }} {
    {{ write_var(element_var, inner) }}
}
- }
- Schema::Map(key_type, value_type) => {
stream.writeInt32(Int32({{ var }}.count))
- let key_var = format!("{}Key", var); let key_var = &key_var;
- let value_var = format!("{}Value", var); let value_var = &value_var;
for ({{ key_var }}, {{ value_var }}) in {{ var }} {
    {{ write_var(key_var, key_type) }}
    {{ write_var(value_var, value_type) }}
}
- }
- }