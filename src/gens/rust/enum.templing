use super::*;

{{ doc_comment(documentation) }}
#[derive(Clone, Debug, PartialEq, Eq, Hash)]
pub enum {{ base_name.camel_case(conv) }} {
- for variant in variants {
    {{ doc_comment(&variant.documentation) }}
    {{ variant.name.camel_case(conv) }},
- }
}

impl trans::Trans for {{ base_name.camel_case(conv) }} {
    fn write_to(&self, writer: &mut dyn std::io::Write) -> std::io::Result<()> {
        let tag: i32 = match self {
            - for (tag, variant) in variants.iter().enumerate() {
            Self::{{ variant.name.camel_case(conv) }} => {{ tag }},
            - }
        };
        trans::Trans::write_to(&tag, writer)
    }
    fn read_from(reader: &mut dyn std::io::Read) -> std::io::Result<Self> {
        let tag = <i32 as trans::Trans>::read_from(reader)?;
        match tag {
            - for (tag, variant) in variants.iter().enumerate() {
            {{ tag }} => Ok(Self::{{ variant.name.camel_case(conv) }}),
            - }
            _ => Err(std::io::Error::new(
                std::io::ErrorKind::Other,
                format!("Unexpected tag {:?}", tag))),
        }
    }
}