module {{ module_name(schema) }} where

import Prelude hiding (id)
import qualified Trans
import Trans (Trans)
{{ imports(schema) }}

{{ doc_comment(documentation) }}
data {{ base_name.camel_case(conv) }}
    - for (index, variant) in variants.iter().enumerate() {
    {{ doc_comment(&variant.documentation) }}
    - if index == 0 {
    = ~
    - } else {
    | ~
    - }
    ~{{ variant.name.camel_case(conv) }}
    - }
    deriving (Eq, Ord, Show)

instance Trans {{ base_name.camel_case(conv) }} where
    read = do
        tag :: Int32 <- Trans.read
        return $ case tag of
            - for (tag, variant) in variants.iter().enumerate() {
            {{ tag }} -> {{ variant.name.camel_case(conv) }}
            - }
            
    - for (tag, variant) in variants.iter().enumerate() {
    write {{ variant.name.camel_case(conv) }} =
        Trans.write ({{ tag }} :: Int32)
    - }