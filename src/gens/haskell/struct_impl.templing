- let struct_name = if let Some((base_name, _)) = base {
-   format!("{}{}", base_name.camel_case(conv), definition.name.camel_case(conv))
- } else {
-   definition.name.camel_case(conv)
- }; let struct_name = &struct_name;
{{ doc_comment(&definition.documentation) }}
data {{ struct_name }} = {{ struct_name }} {
    - for (index, field) in definition.fields.iter().enumerate() {
    {{ doc_comment(&field.documentation) }}
    {{ field.name.mixed_case(conv) }} :: {{ type_name(&field.schema) }}~
    - if index + 1 < definition.fields.len() {
        ~,
    - } else {
        ~ }
    - }
    - }
    deriving Show

instance Trans {{ struct_name }} where
    read = do
        - for field in &definition.fields {
        {{ field.name.mixed_case(conv) }} <- Trans.read
        - }
        return {{ struct_name }} {
            - for (index, field) in definition.fields.iter().enumerate() {
            {{ field.name.mixed_case(conv) }}~
            - if index + 1 < definition.fields.len() {
                ~,
            - } else {
                ~ }
            - }
            - }
    
    write {{ struct_name }} {
        - for (index, field) in definition.fields.iter().enumerate() {
        {{ field.name.mixed_case(conv) }}~
        - if index + 1 < definition.fields.len() {
            ~,
        - } else {
            ~ } = do
        - }
        - }
            - for field in &definition.fields {
            Trans.write {{ field.name.mixed_case(conv) }}
            - }