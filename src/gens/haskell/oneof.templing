module Model.{{ base_name.camel_case(conv) }} where

import Prelude hiding (id)
import qualified Trans
import Trans (Trans)
{{ imports(schema) }}

- for (tag, variant) in variants.iter().enumerate() {
{{ struct_impl(variant, Some((base_name, tag))) }}

- }
data {{ base_name.camel_case(conv) }}
    - for (index, variant) in variants.iter().enumerate() {
    - if index == 0 {
    = ~
    - } else {
    | ~
    - }
    ~{{ variant.name.camel_case(conv) }} {{ base_name.camel_case(conv) }}{{ variant.name.camel_case(conv) }}
    - }
    deriving Show

instance Trans {{ base_name.camel_case(conv) }} where
    read = do
        tag :: Int32 <- Trans.read
        case tag of
            - for (tag, variant) in variants.iter().enumerate() {
            {{ tag }} -> {{ variant.name.camel_case(conv) }} <$> Trans.read
            - }
    
    - for (tag, variant) in variants.iter().enumerate() {
    write ({{ variant.name.camel_case(conv) }} value) = do
        Trans.write ({{ tag }} :: Int32)
        Trans.write value
    - }