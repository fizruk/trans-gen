class {{ struc.name.camel_case(conv) }}
    - if let Some((_, tag)) = base {
    TAG = {{ tag }}

    - }
    - for field in &struc.fields {
    attr_accessor :{{ field.name.snake_case(conv) }}
    - }

    def initialize(~
    - for (index, field) in struc.fields.iter().enumerate() {
    - if index != 0 {
        ~, ~
    - }
        ~{{ field.name.snake_case(conv) }}~
    - }
    ~)
    - for field in &struc.fields {
        @{{ field.name.snake_case(conv) }} = {{ field.name.snake_case(conv) }}
    - }
    end

    def self.read_from(stream)
        - for field in &struc.fields {
        {{ read_var(&field.name.snake_case(conv), &field.schema) }}
        - }
        {{ struc.name.camel_case(conv) }}.new(~
        - for (index, field) in struc.fields.iter().enumerate() {
        - if index != 0 {
            ~, ~
        - }
        ~{{ field.name.snake_case(conv) }}~
        - }
        ~)
    end

    def write_to(stream)
        - if base.is_some() {
        stream.write_int(TAG)
        - }
        - for field in &struc.fields {
        {{ write_var(&format!("@{}", field.name.snake_case(conv)), &field.schema) }}
        - }
    end

    def to_s
        string_result = "{{ struc.name.camel_case(conv) }} { "
        - for (index, field) in struc.fields.iter().enumerate() {
        - if index != 0 {
        string_result += ", "
        - }
        string_result += "{{ field.name.snake_case(conv) }}: "
        {{ var_to_string(&format!("@{}", field.name.snake_case(conv)), &field.schema) }}
        - }
        string_result += " }"
        string_result
    end

    def to_str
        to_s
    end
end