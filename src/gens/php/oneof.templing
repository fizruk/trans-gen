<?php

namespace {{ namespace_path(schema) }} {
    {{ imports(schema) }}

    {{ doc_comment(documentation) }}
    abstract class {{ base_name.camel_case(conv) }}
    {
        {{ doc_write_to(&base_name.camel_case(conv)) }}
        abstract function writeTo({{ self.declare_var("\\OutputStream", "stream") }}){{ self.returns("void") }};

        {{ doc_read_from(&base_name.camel_case(conv)) }}
        static function readFrom({{ self.declare_var("\\InputStream", "stream") }}){{ self.returns(&base_name.camel_case(conv)) }}
        {
            $tag = $stream->readInt32();
            - for variant in variants {
            if ($tag == {{ type_name(schema) }}\{{ variant.name.camel_case(conv) }}::TAG) {
                return {{ type_name(schema) }}\{{ variant.name.camel_case(conv) }}::readFrom($stream);
            }
            - }
            throw new Exception('Unexpected tag value');
        }
    }
}

namespace {{ &type_name(schema)[1..] }} {
    - for (tag, variant) in variants.iter().enumerate() {
    - if tag != 0 {

    - }
    {{ self.struct_impl(variant, Some((schema, tag))) }}
    - }
}