<?php

define('LITTLE_ENDIAN', pack('L', 1) === pack('V', 1));
assert(strlen(pack('g', 0.0)) == 4);
assert(strlen(pack('e', 0.0)) == 8);

abstract class InputStream
{
    abstract function readAtMost({{ self.declare_var("int", "byteCount") }}){{ self.returns("string") }};
    function read({{ self.declare_var("int", "byteCount") }}){{ self.returns("string") }}
    {
        $result = '';
        while (strlen($result) < $byteCount) {
            $result .= $this->readAtMost($byteCount - strlen($result));
        }
        return $result;
    }
    function readBool(){{ self.returns("bool") }}
    {
        $byte = unpack('C', $this->read(1))[1];
        if ($byte == 0) {
            return false;
        } elseif ($byte == 1) {
            return true;
        } else {
            throw new Exception('bool should be 0 or 1');
        }
    }
    function readInt32(){{ self.returns("int") }}
    {
        $bytes = $this->read(4);
        if (!LITTLE_ENDIAN) {
            $bytes = strrev($bytes);
        }
        return unpack('l', $bytes)[1];
    }
    function readInt64(){{ self.returns("int") }}
    {
        $bytes = $this->read(8);
        if (!LITTLE_ENDIAN) {
            $bytes = strrev($bytes);
        }
        return unpack('q', $bytes)[1];
    }
    function readFloat32(){{ self.returns("float") }}
    {
        return unpack('g', $this->read(4))[1];
    }
    function readDouble(){{ self.returns("float") }}
    {
        return unpack('e', $this->read(8))[1];
    }
    function readString(){{ self.returns("string") }}
    {
        return $this->read($this->readInt32());
    }
}

abstract class OutputStream
{
    abstract function write({{ self.declare_var("string", "bytes") }}){{ self.returns("void") }};
    abstract function flush(){{ self.returns("void") }};
    function writeBool({{ self.declare_var("bool", "value") }}){{ self.returns("void") }}
    {
        $this->write(pack('C', $value ? 1 : 0));
    }
    function writeInt32({{ self.declare_var("int", "value") }}){{ self.returns("void") }}
    {
        $bytes = pack('l', $value);
        if (!LITTLE_ENDIAN) {
            $bytes = strrev($bytes);
        }
        $this->write($bytes);
    }
    function writeInt64({{ self.declare_var("int", "value") }}){{ self.returns("void") }}
    {
        $bytes = pack('q', $value);
        if (!LITTLE_ENDIAN) {
            $bytes = strrev($bytes);
        }
        $this->write($bytes);
    }
    function writeFloat32({{ self.declare_var("float", "value") }}){{ self.returns("void") }}
    {
        $bytes = pack('g', $value);
        if (!LITTLE_ENDIAN) {
            $bytes = strrev($bytes);
        }
        $this->write($bytes);
    }
    function writeDouble({{ self.declare_var("float", "value") }}){{ self.returns("void") }}
    {
        $bytes = pack('e', $value);
        if (!LITTLE_ENDIAN) {
            $bytes = strrev($bytes);
        }
        $this->write($bytes);
    }
    function writeString({{ self.declare_var("string", "value") }}){{ self.returns("void") }}
    {
        $this->writeInt32(strlen($value));
        $this->write($value);
    }
}
