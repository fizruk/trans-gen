- let struct_name = match base {
-   Some((base_name, _)) => format!("{}{}", base_name.camel_case(conv), struc.name.camel_case(conv)),
-   None => struc.name.camel_case(conv),
- }; let struct_name = Name::new(struct_name);
type {{ struct_name.camel_case(conv) }} struct {
    - for field in &struc.fields {
    {{ field.name.camel_case(conv) }} {{ type_name(&field.schema) }}
    - }
}

func New{{ struct_name.camel_case(conv) }}(~
- for (index, field) in struc.fields.iter().enumerate() {
- if index != 0 {
    ~, ~
- }
~{{ field.name.mixed_case(conv) }} {{ type_name(&field.schema) }}~
- }
~) {{ struct_name.camel_case(conv) }} {
    return {{ struct_name.camel_case(conv) }} {
        - for field in &struc.fields {
        {{ field.name.camel_case(conv) }}: {{ field.name.mixed_case(conv) }},
        - }
    }
}

func Read{{ struct_name.camel_case(conv) }}(reader io.Reader) {{ struct_name.camel_case(conv) }} {
    - for field in &struc.fields {
    var {{ field.name.mixed_case(conv) }} {{ type_name(&field.schema) }}
    {{ read_var(&field.name.mixed_case(conv), &field.schema) }}
    - }
    return {{ struct_name.camel_case(conv) }} {
        - for field in &struc.fields {
        {{ field.name.camel_case(conv) }}: {{ field.name.mixed_case(conv) }},
        - }
    }
}

func ({{ struct_name.mixed_case(conv) }} {{ struct_name.camel_case(conv) }}) Write(writer io.Writer) {
    - if let Some((_, tag)) = base {
    WriteInt32(writer, {{ tag }})
    - }
    - for field in &struc.fields {
    {{ field.name.mixed_case(conv) }} := {{ struct_name.mixed_case(conv) }}.{{ field.name.camel_case(conv) }}
    {{ write_var(&field.name.mixed_case(conv), &field.schema) }}
    - }
}