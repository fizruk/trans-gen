- match schema {
- Schema::Bool => {
{{ var }} = ReadBool(reader)
- }
- Schema::Int32 => {
{{ var }} = ReadInt32(reader)
- }
- Schema::Int64 => {
{{ var }} = ReadInt64(reader)
- }
- Schema::Float32 => {
{{ var }} = ReadFloat32(reader)
- }
- Schema::Float64 => {
{{ var }} = ReadFloat64(reader)
- }
- Schema::String => {
{{ var }} = ReadString(reader)
- }
- Schema::Struct(Struct { name, .. }) | Schema::OneOf { base_name: name, .. } | Schema::Enum { base_name: name,.. } => {
{{ var }} = Read{{ name.camel_case(conv) }}(reader)
- }
- Schema::Option(inner) => {
if ReadBool(reader) {
    - let value_var = format!("{}Value", var); let value_var = &value_var;
    var {{ value_var }} {{ type_name(inner) }}
    {{ read_var(value_var, inner) }}
    {{ var }} = &{{ value_var }}
} else {
    {{ var }} = nil
}
- }
- Schema::Vec(inner) => {
{{ var }} = make({{ type_name(schema) }}, ReadInt32(reader))
- let index_var = format!("{}Index", var); let index_var = &index_var;
for {{ index_var }} := range {{ var }} {
    - let element_var = format!("{}Element", var); let element_var = &element_var;
    var {{ element_var }} {{ type_name(inner) }}
    {{ read_var(element_var, inner) }}
    {{ var }}[{{ index_var }}] = {{ element_var }}
}
- }
- Schema::Map(key_type, value_type) => {
- let size_var = format!("{}Size", var); let size_var = &size_var;
{{ size_var }} := ReadInt32(reader)
{{ var }} = make({{ type_name(schema) }})
- let index_var = format!("{}Index", var); let index_var = &index_var;
for {{ index_var }} := int32(0); {{ index_var }} < {{ size_var }}; {{ index_var }}++ {
    - let key_var = format!("{}Key", var); let key_var = &key_var;
    - let value_var = format!("{}Value", var); let value_var = &value_var;
    var {{ key_var }} {{ type_name(key_type) }}
    {{ read_var(key_var, key_type) }}
    var {{ value_var }} {{ type_name(value_type) }}
    {{ read_var(value_var, value_type) }}
    {{ var }}[{{ key_var }}] = {{ value_var }}
}
- }
- }